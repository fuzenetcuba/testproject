<?php

namespace BackendBundle\Repository;

use BackendBundle\Entity\Business;
use Doctrine\ORM\EntityRepository;

/**
 * BusinessRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BusinessRepository extends EntityRepository
{
    /**
     * Returns all businesses ordered alphabetically by the business's name
     *
     * @return array
     */
    public function findAllOrderedByName()
    {
        return $this->getEntityManager()
            ->createQuery('SELECT b FROM BackendBundle:Business b ORDER BY b.name ASC')
            ->getResult()
            ;
    }

    /**
     * Returns all businesses ordered by the business's created date
     *
     * @return array
     */
    public function findTopBusiness()
    {
        return $this->getEntityManager()
            ->createQuery('SELECT b FROM BackendBundle:Business b ORDER BY b.createdAt')
            ->getResult()
            ;
    }

    /**
     * Returns businesses ordered by cant of deals
     *
     * @return array
     */
    public function findTopBusinessByCantDeals()
    {
        return $this->getEntityManager()
            ->createQuery('SELECT b, COUNT(d) AS dealsCount FROM BackendBundle:Business b LEFT JOIN BackendBundle:Deal d WHERE d.business = b.id GROUP BY b ORDER BY dealsCount DESC')
            ->getResult()
            ;
    }

    /**
     * Returns all businesses ordered alphabetically by the name of the
     * categories
     *
     * @return array
     */
    public function findAllOrderedByCategory()
    {
        return $this->getEntityManager()
            ->createQuery(
                'SELECT b FROM BackendBundle:Business b JOIN b.categories c ORDER BY c.name ASC'
            )
            ->getResult()
            ;
    }

    /**
     * Returns all businesses ordered by the createdAt attribute of the
     * associated deals, so the businesses with the most recent deals
     * will come on top of the list
     *
     * @return array
     */
    public function findAllOrderedByRecentDeals()
    {
        return $this->getEntityManager()
            ->createQuery(
                'SELECT b FROM BackendBundle:Business b JOIN b.deals d ORDER BY d.createdAt DESC'
            )
            ->getResult()
        ;
    }

    /**
     * Returns a list of related businesses: a random selection of business in
     * the same categories as the original
     *
     * @param \BackendBundle\Entity\Business $business
     * @param int                            $max
     *
     * @return array|Business[]
     */
    public function findRelatedBusinesses(Business $business, $max = 4)
    {
        $categoryIds = array_map(function($item) {
            return $item->getId();
        }, $business->getCategories()->toArray());

        $items = $this->getEntityManager()
            ->createQuery('
                 SELECT b FROM BackendBundle:Business b JOIN b.categories c
                 WHERE b.id <> :id AND c.id IN (:categories)
            ')
            ->setParameter('id', $business->getId())
            ->setParameter('categories', $categoryIds)
            ->getResult()
        ;

        // empty array if no related products could be found
        if (0 === count($items)) {
            return [];
        }

        // let's add return some random results
        $keys = array_rand($items, $max < count($items) ? $max : count($items));

        return array_intersect_key($items, (array)$keys);
    }
}
